---
- name: Verify role preconditions
  ansible.builtin.assert:
    that:
      - mysql_cluster_packages is defined
      - mysql_root_password is defined

- name: Debug package targets
  ansible.builtin.debug:
    var: mysql_cluster_packages

- name: Set install facts
  ansible.builtin.set_fact:
    mysql_install_packages: false
    mysql_config_include_files:
      - src: ansible.cnf
        force: yes
      - src: cluster.cnf
        force: yes

- name: Set root password update flag
  ansible.builtin.set_fact:
    mysql_root_password_update: true
  when: mysql_root_password_update is not defined

- name: Query installed packages
  ansible.builtin.package_facts:
    manager: auto

- name: Unhold MySQL packages
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: install
  when: item in packages
  loop: "{{ mysql_cluster_packages | map('split', '=') | map('first') }}"
  changed_when: false

- name: Set MySQL Server package version
  ansible.builtin.set_fact:
    mysql_package_version_installed: "{{ _mysql_version_installed if _mysql_package_query else _mysql_version_defined }}"
  vars:
    _mysql_package_name: "mysql-server"
    _mysql_package_query: "{{ _mysql_package_name in packages }}"
    _mysql_package: "{{ packages[_mysql_package_name] | default([]) }}"
    _msyql_version_installed: "{{ _mysql_package | map(attribute='version') | first }}"
    _mysql_server_package: "{{ mysql_cluster_packages | select('regex', _mysql_package_name) }}"
    _mysql_version_defined: "{{ _mysql_server_package | map('split', '=') | map('last') | first }}"

- name: Include MySQL variables
  ansible.builtin.include_role:
    name: pokerops.mysql.mysql
    tasks_from: "variables"

- name: Deploy MySQL packages
  ansible.builtin.include_role:
    name: pokerops.mysql.mysql
    tasks_from: "setup-{{ ansible_os_family }}"
  vars:
    mysql_packages: "{{ mysql_cluster_packages }}"

- name: Configure MySQL installation
  ansible.builtin.include_role:
    name: pokerops.mysql.mysql
    tasks_from: "configure"

- name: Manage MySQL deployment
  when: mysql_manage_security | bool
  block:
    - name: Secure MySQL installation
      ansible.builtin.include_role:
        name: pokerops.mysql.mysql
        tasks_from: "secure-installation"

    - name: Manage MySQL clusteradmin user
      community.mysql.mysql_user:
        name: "{{ mysql_clusteradmin_username }}"
        host: '%'
        password: "{{ mysql_clusteradmin_password }}"
        priv: '*.*:ALL,GRANT'
        column_case_sensitive: true
      no_log: "{{ mysql_nolog | default(True) }}"

- name: Hold MySQL packages
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop: "{{ mysql_cluster_packages | map('split', '=') | map('first') }}"
  changed_when: false

- name: Query installed packages
  ansible.builtin.package_facts:
    manager: auto

- name: Restart MySQL Server
  ansible.builtin.service:
    name: "{{ _mysql_package_name }}"
    state: restarted
  vars:
    _mysql_package_name: "mysql-server"
    _mysql_old_version: "{{ mysql_package_version_installed }}"
    _mysql_package: "{{ packages[_mysql_package_name] }}"
    _mysql_new_version: "{{ _mysql_package | map(attribute='version') | first }}"
  when: _mysql_old_version != _mysql_new_version
