---
- name: Verify root password precondition
  ansible.builtin.assert:
    that: mysql_root_password is defined

- name: Set target package facts
  ansible.builtin.set_fact:
    mysql_cluster_packages: "{{ _mysql_packages }}"

- name: Debug package targets
  ansible.builtin.debug:
    var: mysql_cluster_packages

- name: Set install facts
  ansible.builtin.set_fact:
    mysql_install_packages: false
    mysql_config_include_files:
      - src: ansible.cnf
        force: yes
      - src: cluster.cnf
        force: yes

- name: Set root password update flag
  ansible.builtin.set_fact:
    mysql_root_password_update: true
  when: mysql_root_password_update is not defined

- name: Query installed packages
  ansible.builtin.package_facts:
    manager: auto

- name: Get installed MySQL package version
  when: mysql_server_package in packages
  block:
    - name: Query installed MySQL server package version
      ansible.builtin.shell:
        cmd: "dpkg-query -W -f='${Version}' {{ mysql_server_package }}"
      changed_when: false
      register: mysql_server_package_query

    - name: Set installed MySQL package version fact
      ansible.builtin.set_fact:
        mysql_package_version_installed: "{{ mysql_server_package_query.stdout }}"
        mysql_server_installed: true

- name: Get target MySQL package version
  when: not mysql_server_package in packages
  block:
    - name: Query installed MySQL server package version
      ansible.builtin.shell:
        cmd: "apt-cache madison {{ _mysql_server_package }} | awk '{ print $3 }' | grep '^{{ _mysql_release }}' | sort -r | head -1"
      changed_when: false
      register: mysql_server_package_query

    - name: Set installed MySQL package version fact
      ansible.builtin.set_fact:
        mysql_package_version_target: "{{ mysql_server_package_query.stdout }}"
        mysql_server_installed: false

- name: Include MySQL variables
  ansible.builtin.include_role:
    name: pokerops.mysql.mysql
    tasks_from: "variables"

- name: Deploy MySQL packages
  ansible.builtin.include_role:
    name: pokerops.mysql.mysql
    tasks_from: "setup-{{ ansible_os_family }}"
  vars:
    mysql_packages: "{{ mysql_cluster_packages }}"

- name: Configure MySQL installation
  ansible.builtin.include_role:
    name: pokerops.mysql.mysql
    tasks_from: "configure"

- name: Manage MySQL deployment
  when: mysql_manage_security | bool
  block:
    - name: Secure MySQL installation
      ansible.builtin.include_role:
        name: pokerops.mysql.mysql
        tasks_from: "secure-installation"

    - name: Manage MySQL clusteradmin user
      community.mysql.mysql_user:
        name: "{{ mysql_clusteradmin_username }}"
        host: "%"
        password: "{{ mysql_clusteradmin_password }}"
        priv: "*.*:ALL,GRANT"
        column_case_sensitive: true
      no_log: "{{ mysql_nolog | default(True) }}"

- name: Query installed packages
  ansible.builtin.package_facts:
    manager: auto

- name: Restart MySQL Server
  ansible.builtin.service:
    name: "{{ _mysql_server_daemon }}"
    state: restarted
  vars:
    _mysql_package: "{{ packages[mysql_server_package] }}"
    _mysql_installed: "{{ mysql_server_installed | bool }}"
    _mysql_package_version: "{{ mysql_package_version_installed if _mysql_installed else mysql_package_version_target }}"
    _mysql_installed_target: "{{ _mysql_package | map(attribute='version') | first }}"
  when: _mysql_package_version != _mysql_installed_target
