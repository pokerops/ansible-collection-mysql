---
- name: Query MySQL Cluster status
  hosts: "{{ mysql_cluster_group | default('mysql_cluster') }}"
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: End play for offline hosts
      ansible.builtin.meta: end_host
      when:
        - mysql_server_daemon in services
        - services[mysql_server_daemon].state != 'running'

    - name: Query node cluster membership
      ansible.builtin.command:
        cmd: "mysql -h '127.0.0.1' -sN -e \"{{ _mysql_cmd }}\""
      vars:
        _mysql_table: "performance_schema.replication_group_members"
        _mysql_cmd: "SELECT MEMBER_HOST FROM {{ _mysql_table }} WHERE member_host='{{ inventory_hostname }}';"
      ignore_errors: true
      register: _member_query

    - name: Debug node cluster membership
      ansible.builtin.debug:
        msg: "{{ _member_query.stdout }}"

    - name: Query node cluster status
      ansible.builtin.command:
        cmd: "mysql -h '127.0.0.1' -sN -e '{{ _mysql_cmd }}'"
      vars:
        _mysql_cmd: 'SELECT @@global.super_read_only AS sro'
      ignore_errors: true
      register: _slave_query

    - name: Debug node cluster status
      ansible.builtin.debug:
        msg: "{{ _slave_query.stdout }}"

    - name: Set cluster membership facts
      ansible.builtin.set_fact:
        _cluster_alien: "{{ _is_alien | bool }}"
        _cluster_member: "{{ _is_member | bool }}"
        _cluster_master: "{{ _is_master | bool }}"
        _cluster_slave: "{{ _is_slave | bool }}"
      vars:
        _service: "{{ mysql_server_daemon }}.service"
        _is_installed: "{{ _service in services }}"
        _is_alien: "{{ (not _is_installed) or (_member_query is failed) or (_member_query.stdout == '') }}"
        _is_member: "{{ not _is_alien }}"
        _is_slave: "{{ _is_member and (_slave_query.stdout | int > 0) }}"
        _is_master: "{{ _is_member and not _is_slave }}"

    - name: Group cluster members
      ansible.builtin.group_by:
        key: "_cluster_{{ 'alien' if _cluster_alien else _status }}"
      vars:
        _status: "{{ 'master' if _cluster_master else 'slave' }}"
      changed_when: false

    - name: Verify cluster status
      ansible.builtin.assert:
        that:
          - (mysql_bootstrap_allow | default(True) | bool) or _has_master
          - _unique_master | bool
          - _slaves_have_master | bool
          - (mysql_cluster_name is defined) or (inventory_hostname in _mysqlrouters)
          - not ((inventory_hostname in _mysqlrouters) and (inventory_hostname in _mysqlservers))
        fail_msg: "MySQL Cluster is in an inconsistent state"
      vars:
        _aliens: "{{ groups['_cluster_alien'] | default([]) }}"
        _masters: "{{ groups['_cluster_master'] | default([]) }}"
        _slaves: "{{ groups['_cluster_slave'] | default([]) }}"
        _unique_master: "{{ _masters | length < 2 }}"
        _has_master: "{{ _masters | length > 0  }}"
        _has_slaves: "{{ _slaves | length > 0 }}"
        _slaves_have_master: "{{ not _has_slaves or _has_master }}"
        _mysqlrouters: "{{ groups[mysql_router_group | default('mysql_router')] }}"
        _mysqlservers: "{{ groups[mysql_cluster_group | default('mysql_cluster')] }}"
      when: mysql_cluster_check | default(True)

    - name: Set hostgroup facts
      ansible.builtin.set_fact:
        _hosts_cluster: "{{ ansible_play_hosts_all }}"
        _hosts_masters: "{{ _masters + _bootstrap }}"
        _hosts_slaves: "{{ _slaves | difference(_bootstrap) }}"
      vars:
        _aliens: "{{ groups['_cluster_alien'] | default([]) }}"
        _masters: "{{ groups['_cluster_master'] | default([]) }}"
        _slaves: "{{ groups['_cluster_slave'] | default([]) }}"
        _bootstrap: "{{ [] if (_masters | length > 0) else ([_aliens | first]) }}"

    - name: Debug host cluster role
      ansible.builtin.debug:
        msg: "Adding host to {{ 'master' if _master else ('slave' if _slave else 'alien') }} role"
      vars:
        _master: "{{ inventory_hostname in _hosts_masters }}"
        _slave: "{{ inventory_hostname  in _hosts_slaves }}"

    - name: Create cluster role groups
      ansible.builtin.group_by:
        key: "_mysql_{{ 'master' if _master else ('slave' if _slave else 'alien') }}"
      vars:
        _master: "{{ inventory_hostname in _hosts_masters }}"
        _slave: "{{ inventory_hostname  in _hosts_slaves }}"
      changed_when: false

    - name: Create cluster name groups
      ansible.builtin.group_by:
        key: "_mysql_cluster_{{ mysql_cluster_name }}"
      changed_when: false

    - name: Verify MySQL Cluster state
      ansible.builtin.assert:
        that: groups['_mysql_master'] | length == 1
      when: mysql_cluster_check | default(True)
