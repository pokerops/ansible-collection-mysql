---
- name: Load MySQL Cluster facts
  ansible.builtin.import_playbook: pokerops.mysql.facts
  vars:
    mysql_groupset: install

- name: Query MySQL package versions on master nodes
  hosts: "{{ mysql_group_prefix | default('_mysql') }}_install_master"
  vars_files:
    - ../vars/default.yml
  tasks:
    - name: Query installed packages
      ansible.builtin.package_facts:
        manager: auto

    - name: Set MySQL package facts
      ansible.builtin.set_fact:
        _mysql_packages_versioned: "{{ _packages_versioned }}"
      vars:
        _packages: "{{ _mysql_packages }}"
        _packages_versioned: "{{ _packages | select('match', '.*=.*') }}"

    - name: Verify MySQL packages
      ansible.builtin.assert:
        that:
          - _packages_num == _default_packages_num
          - (_versioned_num == _packages_num) or (_unversioned_num == _packages_num)
          - _packages | reject('in', _default_packages) | length == 0
      vars:
        _default_packages: "{{ mysql_packages_default }}"
        _default_packages_num: "{{ _default_packages | length }}"
        _packages: "{{ _mysql_packages }}"
        _packages_num: "{{ _packages | length }}"
        _packages_versioned: "{{ _mysql_packages_versioned }}"
        _versioned_num: "{{ _packages_versioned | length }}"
        _packages_unversioned: "{{ _packages | difference(_packages_versioned) }}"
        _unversioned_num: "{{ _packages_unversioned | length }}"

    - name: Initialize MySQL package facts
      when: _mysql_packages_versioned | length == 0
      block:
        - name: Query installed MySQL server package version
          ansible.builtin.shell:
            cmd: "dpkg-query -W -f='${Version}' {{ mysql_server_package }}"
          changed_when: false
          register: mysql_server_package_query
          when: mysql_server_package in packages

        - name: Query target MySQL server package version
          ansible.builtin.shell:
            cmd: "apt-cache madison {{ mysql_server_package }} | awk '{ print $3 }' | grep '^{{ _mysql_release }}' | sort -r | head -1"
          changed_when: false
          register: mysql_server_package_query
          when: mysql_server_package not in packages

        - name: Set MySQL master package facts
          ansible.builtin.set_fact:
            mysql_master_packages: "{{ _mysql_packages | map(_map_format, '%s=' + _release) }}"
          vars:
            _map_format: "nephelaiio.plugins.map_format"
            _release: "{{ mysql_server_package_query.stdout }}"

        - name: Set MySQL package facts for cluster members
          ansible.builtin.set_fact:
            mysql_cluster_packages: "{{ mysql_master_packages }}"
          loop: "{{ groups[mysql_cluster_group | default('mysql_cluster')] }}"
          delegate_to: "{{ item }}"
          delegate_facts: true

- name: Deploy MySQL packages on alien nodes
  hosts: "{{ mysql_group_prefix | default('_mysql') }}_install_alien"
  become: true
  vars_files:
    - ../vars/default.yml
  tasks:
    - name: Deploy MySQL service
      ansible.builtin.include_role:
        name: pokerops.mysql.cluster
      vars:
        mysql_manage_security: true

- name: Deploy MySQL packages on slave nodes
  hosts: "{{ mysql_group_prefix | default('_mysql') }}_install_slave"
  become: true
  vars_files:
    - ../vars/default.yml
  tasks:
    - name: Deploy MySQL service
      ansible.builtin.include_role:
        name: pokerops.mysql.cluster
      vars:
        mysql_root_password_update: false
        mysql_manage_security: false

- name: Deploy MySQL packages on master nodes
  hosts: "{{ mysql_group_prefix | default('_mysql') }}_install_master"
  become: true
  vars_files:
    - ../vars/default.yml
  tasks:
    - name: Deploy MySQL service
      ansible.builtin.include_role:
        name: pokerops.mysql.cluster
      vars:
        mysql_manage_security: true

    - name: Slurp my.cnf for root user
      ansible.builtin.slurp:
        path: "{{ mysql_root_home }}/.my.cnf"
      register: _mysql_mycnf_slurp

    - name: Set my.cnf facts
      ansible.builtin.set_fact:
        mysql_config_mycnf: "{{ _mysql_mycnf_slurp.content | ansible.builtin.b64decode }}"
      loop: "{{ groups[mysql_cluster_group | default('mysql_cluster')] }}"
      delegate_to: "{{ item }}"
      delegate_facts: true

- name: Distribute MySQL my.cnf to slave nodes
  hosts: "{{ mysql_group_prefix | default('_mysql') }}_install_slave"
  become: true
  vars_files:
    - ../vars/default.yml
  tasks:
    - name: Write my.cnf configuration
      ansible.builtin.copy:
        dest: "{{ mysql_root_home }}/.my.cnf"
        content: "{{ mysql_config_mycnf }}"
        mode: "u=rw,go="

- name: Configure MySQL shell
  hosts:
    - "{{ mysql_group_prefix | default('_mysql') }}_install_master"
    - "{{ mysql_group_prefix | default('_mysql') }}_install_slave"
    - "{{ mysql_group_prefix | default('_mysql') }}_install_alien"
  vars:
    _mysql_cluster_hostgroups:
      - "{{ mysql_group_prefix | default('_mysql') }}_install_master"
      - "{{ mysql_group_prefix | default('_mysql') }}_install_slave"
      - "{{ mysql_group_prefix | default('_mysql') }}_install_alien"
  vars_files:
    - ../vars/default.yml
  tasks:
    - name: Create user config directory for MySQL shell
      ansible.builtin.file:
        path: "{{ mysql_shell_configdir }}"
        state: directory
        mode: "u=rwx,go="

    - name: Configure MySQL shell theme
      ansible.builtin.copy:
        dest: "{{ mysql_shell_configdir }}/prompt.json"
        content: "{{ mysqlsh_prompt | to_nice_json(indent=2) }}"
        mode: "u=rw,go="
      vars:
        mysqlsh_prompt:
          symbols: {}
          segments: []

    - name: Store MySQL Cluster local member credentials
      ansible.builtin.expect:
        command: >-
          mysqlsh --javascript --password --save-passwords=always --quiet-start=2
            --host {{ item }}
            --user {{ mysql_clusteradmin_username }}
        responses:
          ".*> $": "\\q"
          ".*Please provide the password for.*": "{{ mysql_clusteradmin_password }}"
        timeout: 3
      loop: "{{ _mysql_cluster_hostgroups | intersect(groups.keys()) | map('extract', groups) | flatten | unique }}"
      no_log: "{{ mysql_nolog | default(True) }}"
      register: _mysqlsh_node_register

    - name: Store MySQL Cluster remote member credentials
      ansible.builtin.expect:
        command: >-
          mysqlsh --javascript --password --save-passwords=always --quiet-start=2
            --host {{ inventory_hostname }}
            --user {{ mysql_clusteradmin_username }}
            --execute 'shell.connect("{{ mysql_clusteradmin_username }}@{{ item }}")'
        responses:
          ".*> $": "\\q"
          ".*Please provide the password for.*": "{{ mysql_clusteradmin_password }}"
        timeout: 3
      loop: "{{ _mysql_cluster_hostgroups | intersect(groups.keys()) | map('extract', groups) | flatten | unique }}"
      no_log: "{{ mysql_nolog | default(True) }}"
      register: _mysqlsh_node_register
