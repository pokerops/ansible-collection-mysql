---
- name: Restart master node services
  hosts: mysql_cluster
  become: true
  vars_files:
    - ../../playbooks/vars.yml
  tasks:
    - name: Query MySQL cluster status
      ansible.builtin.command:
        cmd: "mysql -h '127.0.0.1' -sN -e '{{ _mysql_cmd }}'"
      vars:
        _mysql_cmd: 'SELECT @@global.super_read_only AS sro'
      register: _slave_query

    - name: Stop play for slave nodes
      ansible.builtin.meta: end_host
      when: _slave_query.stdout | int ==  1

    - name: Set cluster master facts
      ansible.builtin.set_fact:
        mysql_cluster_master: "{{ inventory_hostname }}"
      loop: "{{ groups[mysql_cluster_group | default('mysql_cluster')] }}"
      delegate_to: "{{ item }}"
      delegate_facts: true

    - name: Stop MySQL daemon
      ansible.builtin.service:
        name: "{{ mysql_server_daemon }}"
        state: stopped

    - name: Wait for cluster failover
      ansible.builtin.pause:
        seconds: 10

    - name: Start MySQL daemon
      ansible.builtin.service:
        name: "{{ mysql_server_daemon }}"
        state: started


- name: Verify cluster failover
  hosts: mysql_cluster
  become: true
  vars_files:
    - ../../playbooks/vars.yml
  tasks:
    - name: Query MySQL cluster status
      ansible.builtin.command:
        cmd: "mysql -h '127.0.0.1' -sN -e \"{{ _mysql_cmd }}\""
      vars:
        _mysql_cmd: "SELECT @@global.super_read_only AS sro"
      register: _slave_query

    - name: Stop play for slave nodes
      ansible.builtin.meta: end_host
      when: _slave_query.stdout | int ==  1

    - name: Verify cluster master failover
      ansible.builtin.assert:
        that: mysql_cluster_master != inventory_hostname


- name: Reset cluster root password
  ansible.builtin.import_playbook: pokerops.mysql.install
  vars:
    mysql_root_password: supersecret
    mysql_clusteradmin_password: notsosecret


- name: Verify cluster password changes
  hosts: mysql_cluster
  tasks:
    - name: Query MySQL cluster status with stored credentials
      ansible.builtin.command:
        cmd: "mysql -h '127.0.0.1' -sN -e '{{ _mysql_cmd }}'"
      vars:
        _mysql_cmd: 'SELECT @@global.super_read_only AS sro'
      become: true
      register: _slave_cli_query

    - name: Query MySQL cluster status with explicit credentials
      community.mysql.mysql_query:
        query: SELECT @@global.super_read_only AS sro
        login_user: root
        login_password: supersecret

    - name: Connect to MySQL shell with explicit credentials
      ansible.builtin.expect:
        command: >-
          mysqlsh --javascript --password --save-passwords=always --quiet-start=2
            --host {{ inventory_hostname }}
            --user clusteradmin
        responses:
          ".*> $": "\\q"
          ".*Please provide the password for.*": "notsosecret"
        timeout: 3
